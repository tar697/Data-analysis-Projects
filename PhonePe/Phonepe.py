# -*- coding: utf-8 -*-
"""Sample_ML_Submission_Template-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13lOUix_f-AhfThpY1t-Cy9gE-TDX72fq

#**Project Name   - Phonepe**

# **Project Summary** -
This project involved end-to-end data analysis and visualization of digital payment data from the PhonePe Pulse GitHub repository. Using Python, SQLite, and Streamlit, we extracted, cleaned, and loaded data from multiple JSON files into a structured SQL database. The data was then analyzed through business-focused case studies covering transaction patterns, user engagement, insurance growth, and market expansion trends across Indian states and districts.

We developed an interactive Streamlit dashboard to visualize insights such as:

Top-performing states by transaction volume

1.   User registration and app engagement trends
2.   Quarterly growth patterns
3.   Regional analysis of user activity

💡 Key Outcomes:
Hands-on experience with ETL, SQL, Pandas, Seaborn, and Streamlit

Developed actionable insights through real-time interactive dashboards

Simulated multiple business scenarios relevant to fintech and digital payments

# **GitHub Link -**

Provide your GitHub Link here.

# **Problem Statement**

**Write Problem Statement Here.**

# **General Guidelines** : -

1.   Well-structured, formatted, and commented code is required.
2.   Exception Handling, Production Grade Code & Deployment Ready Code will be a plus. Those students will be awarded some additional credits.
     
     The additional credits will have advantages over other students during Star Student selection.
       
             [ Note: - Deployment Ready Code is defined as, the whole .ipynb notebook should be executable in one go
                       without a single error logged. ]

3.   Each and every logic should have proper comments.
4. You may add as many number of charts you want. Make Sure for each and every chart the following format should be answered.
        

```
# Chart visualization code
```
            

*   Why did you pick the specific chart?
*   What is/are the insight(s) found from the chart?
* Will the gained insights help creating a positive business impact?
Are there any insights that lead to negative growth? Justify with specific reason.

5. You have to create at least 15 logical & meaningful charts having important insights.


[ Hints : - Do the Vizualization in  a structured way while following "UBM" Rule.

U - Univariate Analysis,

B - Bivariate Analysis (Numerical - Categorical, Numerical - Numerical, Categorical - Categorical)

M - Multivariate Analysis
 ]





6. You may add more ml algorithms for model creation. Make sure for each and every algorithm, the following format should be answered.


*   Explain the ML Model used and it's performance using Evaluation metric Score Chart.


*   Cross- Validation & Hyperparameter Tuning

*   Have you seen any improvement? Note down the improvement with updates Evaluation metric Score Chart.

*   Explain each evaluation metric's indication towards business and the business impact pf the ML model used.

# ***Let's Begin !***

## ***1. Know Your Data***

#**Data Extraction: Clone the Github library**
"""

# Import Libraries
!git clone https://github.com/PhonePe/pulse.git

"""#**SQL Database and Table Creation:**"""

import sqlite3
import pandas as pd


# Connect to DB
conn = sqlite3.connect('phonepe_pulse.db')
cursor = conn.cursor()

# Use triple quotes and straight (ASCII) quotes
cursor.executescript("""
CREATE TABLE IF NOT EXISTS aggregated_user (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    registered_users INTEGER,
    app_opens INTEGER
);

CREATE TABLE IF NOT EXISTS aggregated_transaction (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    transaction_type TEXT,
    transaction_count INTEGER,
    transaction_amount REAL
);
CREATE TABLE IF NOT EXISTS aggregated_insurance (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    insurance_count INTEGER,
    insurance_amount REAL
);

CREATE TABLE IF NOT EXISTS map_user (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    district TEXT,
    registered_users INTEGER,
    app_opens INTEGER
);

CREATE TABLE IF NOT EXISTS map_map (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    district TEXT,
    transaction_count INTEGER,
    transaction_amount REAL
);
CREATE TABLE IF NOT EXISTS map_insurance (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    district TEXT,
    insurance_count INTEGER,
    insurance_amount REAL
);
CREATE TABLE IF NOT EXISTS top_user (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    pincode TEXT,
    registered_users INTEGER
);
CREATE TABLE IF NOT EXISTS top_insurance (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    location_type TEXT,     -- 'state', 'district', or 'pincode'
    location_name TEXT,
    insurance_count INTEGER,
    insurance_amount REAL
);
CREATE TABLE IF NOT EXISTS top_map (
    year INTEGER,
    quarter INTEGER,
    state TEXT,
    location_type TEXT,     -- 'state', 'district', or 'pincode'
    location_name TEXT,
    transaction_count INTEGER,
    transaction_amount REAL
);
""")

conn.commit()
print("✅ Tables created successfully.")

"""#**Check Tables created**"""

tables = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", conn)
print(f"Total tables: {len(tables)}")
tables

"""#**Load Data into tables**

#1. Load Data into aggregated_transaction
"""

import os
import json
import sqlite3

conn = sqlite3.connect("phonepe_pulse.db")
cursor = conn.cursor()

base_path = "/content/pulse/data/aggregated/transaction/country/india/state/"

for state in os.listdir(base_path):
    state_path = os.path.join(base_path, state)

    for year in os.listdir(state_path):
        year_path = os.path.join(state_path, year)

        for file in os.listdir(year_path):
            if file.endswith(".json"):
                quarter = int(file.strip(".json"))
                file_path = os.path.join(year_path, file)

                with open(file_path, "r") as f:
                    data = json.load(f)
                    trans_data = data['data'].get('transactionData', [])

                    for entry in trans_data:
                        name = entry['name']
                        count = entry['paymentInstruments'][0]['count']
                        amount = entry['paymentInstruments'][0]['amount']

                        cursor.execute("""
                            INSERT INTO aggregated_transaction
                            (year, quarter, state, transaction_type, transaction_count, transaction_amount)
                            VALUES (?, ?, ?, ?, ?, ?)
                        """, (int(year), quarter, state, name, count, amount))

conn.commit()
print("✅ aggregated_transaction data inserted successfully.")

df_check = pd.read_sql_query("SELECT * FROM aggregated_transaction LIMIT 5", conn)
df_check

"""#2. Load aggregated_user into aggregated_user Table"""

base_path = "/content/pulse/data/aggregated/user/country/india/state/"

for state in os.listdir(base_path):
    for year in os.listdir(os.path.join(base_path, state)):
        for file in os.listdir(os.path.join(base_path, state, year)):
            quarter = int(file.strip(".json"))
            file_path = os.path.join(base_path, state, year, file)
            with open(file_path, "r") as f:
                data = json.load(f)
                reg = data["data"]["aggregated"]["registeredUsers"]
                app = data["data"]["aggregated"].get("appOpens", 0)
                cursor.execute("""
                    INSERT INTO aggregated_user
                    (year, quarter, state, registered_users, app_opens)
                    VALUES (?, ?, ?, ?, ?)
                """, (int(year), quarter, state, reg, app))
conn.commit()
print("✅ aggregated_user data inserted successfully.")

"""# 3. Load map/user into map_user Table"""

base_path = "/content/pulse/data/map/user/hover/country/india/state/"

for state in os.listdir(base_path):
    for year in os.listdir(os.path.join(base_path, state)):
        for file in os.listdir(os.path.join(base_path, state, year)):
            quarter = int(file.strip(".json"))
            file_path = os.path.join(base_path, state, year, file)
            with open(file_path, "r") as f:
                data = json.load(f)
                hover_data = data["data"]["hoverData"]
                for district in hover_data:
                    reg = hover_data[district]["registeredUsers"]
                    app = hover_data[district].get("appOpens", 0)
                    cursor.execute("""
                        INSERT INTO map_user
                        (year, quarter, state, district, registered_users, app_opens)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (int(year), quarter, state, district, reg, app))
conn.commit()
print("✅ map_user data inserted successfully.")

"""#4. Load map/transaction into map_map Table"""

base_path = "/content/pulse/data/map/transaction/hover/country/india/state/"

for state in os.listdir(base_path):
    for year in os.listdir(os.path.join(base_path, state)):
        for file in os.listdir(os.path.join(base_path, state, year)):
            quarter = int(file.strip(".json"))
            file_path = os.path.join(base_path, state, year, file)
            with open(file_path, "r") as f:
                data = json.load(f)
                dist_list = data["data"]["hoverDataList"]
                for dist in dist_list:
                    district = dist["name"]
                    count = dist["metric"][0]["count"]
                    amount = dist["metric"][0]["amount"]
                    cursor.execute("""
                        INSERT INTO map_map
                        (year, quarter, state, district, transaction_count, transaction_amount)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (int(year), quarter, state, district, count, amount))
conn.commit()
print("✅ map_map data inserted successfully.")

"""#5. Load top/user into top_user Table"""

base_path = "/content/pulse/data/top/user/country/india/state/"

for state in os.listdir(base_path):
    for year in os.listdir(os.path.join(base_path, state)):
        for file in os.listdir(os.path.join(base_path, state, year)):
            quarter = int(file.strip(".json"))
            file_path = os.path.join(base_path, state, year, file)
            with open(file_path, "r") as f:
                data = json.load(f)
                pincodes = data["data"]["pincodes"]
                for pin in pincodes:
                    pincode = pin["name"]
                    users = pin["registeredUsers"]
                    cursor.execute("""
                        INSERT INTO top_user
                        (year, quarter, state, pincode, registered_users)
                        VALUES (?, ?, ?, ?, ?)
                    """, (int(year), quarter, state, pincode, users))
conn.commit()
print("top_user data inserted successfully.")

"""#**Case Study 1: Decoding Transaction Dynamics on PhonePe across states**

"""

import pandas as pd
import sqlite3

conn = sqlite3.connect("phonepe_pulse.db")

query_1 = """
SELECT
    state, year, quarter,
    SUM(transaction_count) AS total_transactions
FROM aggregated_transaction
GROUP BY state, year, quarter
ORDER BY state, year, quarter;
"""

df1 = pd.read_sql_query(query_1, conn)
df1.head()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15,8))
top_states = df1.groupby('state')['total_transactions'].sum().sort_values(ascending=False).head(6).index
sns.lineplot(data=df1[df1['state'].isin(top_states)],
             x='quarter', y='total_transactions', hue='state', style='year', markers=True)

plt.title('Transaction Growth Trends - Top States')
plt.xlabel('Quarter')
plt.ylabel('Total Transactions')
plt.legend(title='State')
plt.grid(True)
plt.tight_layout()
plt.show()

"""# **✅ Case Study 2: Device Engagement (Top 10 Brands)**"""

conn = sqlite3.connect("phonepe_pulse.db")
query2 = """
SELECT state, SUM(registered_users) AS total_users, SUM(app_opens) AS total_app_opens
FROM aggregated_user
GROUP BY state
ORDER BY total_users DESC
LIMIT 10;
"""

df2 = pd.read_sql_query(query2, conn)

plt.figure()
sns.barplot(x="total_users", y="state", data=df2, palette="Blues_d")
plt.title("📱 Top 10 Device Brands by Registered Users")
plt.xlabel("Registered Users")
plt.ylabel("State")
plt.tight_layout()
plt.show()

"""# **✅ Case Study 4: Transaction Analysis for Market Expansion**"""

import sqlite3
import pandas as pd

# Connect to the PhonePe database
conn = sqlite3.connect("phonepe_pulse.db")

# Query: Total transactions and amount per state
df_transaction = pd.read_sql_query("""
SELECT
    state,
    SUM(transaction_count) AS total_transactions,
    SUM(transaction_amount) AS total_amount
FROM aggregated_transaction
GROUP BY state
ORDER BY total_amount DESC
""", conn)

conn.close()

# Show top 5 states
df_transaction.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Top 10 states by transaction value
top_states_txn = df_transaction.sort_values("total_amount", ascending=False).head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x="total_amount", y="state", data=top_states_txn, palette="Purples_d")
plt.title("💳 Top 10 States by Transaction Amount")
plt.xlabel("Total Transaction Value (₹)")
plt.ylabel("State")
plt.tight_layout()
plt.show()


# Bottom 10 states by transaction amount
low_states = df_transaction.sort_values("total_amount", ascending=True).head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x="total_amount", y="state", data=low_states, palette="Reds")
plt.title("📉 Bottom 10 States by Transaction Amount")
plt.xlabel("Total Transaction Value (₹)")
plt.ylabel("State")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(
    x="total_transactions",
    y="total_amount",
    size="total_amount",
    hue="state",
    data=df_transaction,
    palette="husl",
    legend=False
)
plt.title("🧭 State-wise Transaction Volume vs Value")
plt.xlabel("Total Transactions")
plt.ylabel("Total Transaction Amount")
plt.tight_layout()
plt.show()

"""#**Case Study 5: User Engagement and Growth Strategy**"""

import sqlite3
import pandas as pd

conn = sqlite3.connect("phonepe_pulse.db")

df_users_state = pd.read_sql_query("""
SELECT
    state,
    SUM(registered_users) AS total_registered_users,
    SUM(app_opens) AS total_app_opens
FROM aggregated_user
GROUP BY state
ORDER BY total_registered_users DESC;
""", conn)

conn.close()

# Show preview
df_users_state.head()

import matplotlib.pyplot as plt
import seaborn as sns

top_states_users = df_users_state.head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x="total_registered_users", y="state", data=top_states_users, palette="Blues_d")
plt.title("🧑‍💻 Top 10 States by Registered Users")
plt.xlabel("Registered Users")
plt.ylabel("State")
plt.tight_layout()
plt.show()


plt.figure(figsize=(10, 6))
sns.scatterplot(
    x="total_registered_users",
    y="total_app_opens",
    hue="state",
    data=df_users_state,
    palette="husl",
    legend=False
)
plt.title("📱 State-wise User Engagement: App Opens vs Registered Users")
plt.xlabel("Total Registered Users")
plt.ylabel("Total App Opens")
plt.tight_layout()
plt.show()


conn = sqlite3.connect("phonepe_pulse.db")

df_district_users = pd.read_sql_query("""
SELECT
    state,
    district,
    SUM(registered_users) AS total_registered_users,
    SUM(app_opens) AS total_app_opens
FROM map_user
GROUP BY state, district
ORDER BY total_registered_users DESC
LIMIT 10;
""", conn)

conn.close()

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(
    x="total_registered_users",
    y="district",
    data=df_district_users,
    palette="YlGn"
)
plt.title("🏙️ Top 10 Districts by Registered Users")
plt.xlabel("Registered Users")
plt.ylabel("District")
plt.tight_layout()
plt.show()

"""#**Case Study: 8. User Registration Analysis**"""

import sqlite3
import pandas as pd

conn = sqlite3.connect("phonepe_pulse.db")

df_registrations = pd.read_sql_query("""
SELECT
    state,
    SUM(registered_users) AS total_registered_users
FROM aggregated_user
GROUP BY state
ORDER BY total_registered_users DESC
""", conn)

conn.close()

# View top results
df_registrations.head()

# 1. Top 10 States by Registration

import matplotlib.pyplot as plt
import seaborn as sns

top_states_reg = df_registrations.head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x="total_registered_users", y="state", data=top_states_reg, palette="BuGn")
plt.title("🧑‍💼 Top 10 States by Registered Users")
plt.xlabel("Total Registered Users")
plt.ylabel("State")
plt.tight_layout()
plt.show()

#2. Quarterly Registration Growth

conn = sqlite3.connect("phonepe_pulse.db")

df_quarterly_reg = pd.read_sql_query("""
SELECT
    year,
    quarter,
    SUM(registered_users) AS total_users
FROM aggregated_user
GROUP BY year, quarter
ORDER BY year, quarter
""", conn)

conn.close()

# Combine year and quarter
df_quarterly_reg["period"] = df_quarterly_reg["year"].astype(str) + " Q" + df_quarterly_reg["quarter"].astype(str)

# Plot
plt.figure(figsize=(10, 6))
sns.lineplot(x="period", y="total_users", data=df_quarterly_reg, marker="o", color="teal")
plt.title("📈 Registered User Growth Over Time (All India)")
plt.xlabel("Year-Quarter")
plt.ylabel("Total Registered Users")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

from google.colab import files
files.download("phonepe_pulse.db")